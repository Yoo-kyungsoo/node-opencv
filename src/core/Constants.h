#ifndef __CORE__CONSTANTS_H__
#define __CORE__CONSTANTS_H__

#include "common.h"

#define DEFINE_CONST(C) \
  Nan::Set(target, Nan::New<String>(#C).ToLocalChecked(), Nan::New<Integer>(C));

#define DEFINE_CONST_INT(C) \
  Nan::Set(target, Nan::New<String>(#C).ToLocalChecked(), Nan::New<Integer>((int)C));

#define DEFINE_CONST_ENUM(C) \
  Nan::Set(target, Nan::New<String>(#C).ToLocalChecked(), Nan::New<Integer>((int)(cv::C)));

class Constants {
public:
  static void Init(Local<Object> target) {
    DEFINE_CONST(CV_8U);
    DEFINE_CONST(CV_8S);
    DEFINE_CONST(CV_16U);
    DEFINE_CONST(CV_16S);
    DEFINE_CONST(CV_32S);
    DEFINE_CONST(CV_32F);
    DEFINE_CONST(CV_64F);
    DEFINE_CONST(CV_USRTYPE1);

    DEFINE_CONST(CV_8UC1);
    DEFINE_CONST(CV_8UC2);
    DEFINE_CONST(CV_8UC3);
    DEFINE_CONST(CV_8UC4);

    DEFINE_CONST(CV_8SC1);
    DEFINE_CONST(CV_8SC2);
    DEFINE_CONST(CV_8SC3);
    DEFINE_CONST(CV_8SC4);

    DEFINE_CONST(CV_16UC1);
    DEFINE_CONST(CV_16UC2);
    DEFINE_CONST(CV_16UC3);
    DEFINE_CONST(CV_16UC4);

    DEFINE_CONST(CV_16SC1);
    DEFINE_CONST(CV_16SC2);
    DEFINE_CONST(CV_16SC3);
    DEFINE_CONST(CV_16SC4);

    DEFINE_CONST(CV_32SC1);
    DEFINE_CONST(CV_32SC2);
    DEFINE_CONST(CV_32SC3);
    DEFINE_CONST(CV_32SC4);

    DEFINE_CONST(CV_32FC1);
    DEFINE_CONST(CV_32FC2);
    DEFINE_CONST(CV_32FC3);
    DEFINE_CONST(CV_32FC4);

    DEFINE_CONST(CV_64FC1);
    DEFINE_CONST(CV_64FC2);
    DEFINE_CONST(CV_64FC3);
    DEFINE_CONST(CV_64FC4);

    // decomp types
    DEFINE_CONST_ENUM(DECOMP_LU);
    DEFINE_CONST_ENUM(DECOMP_SVD);
    DEFINE_CONST_ENUM(DECOMP_EIG);
    DEFINE_CONST_ENUM(DECOMP_CHOLESKY);
    DEFINE_CONST_ENUM(DECOMP_QR);
    DEFINE_CONST_ENUM(DECOMP_NORMAL);

    // norm types
    DEFINE_CONST_ENUM(NORM_INF);
    DEFINE_CONST_ENUM(NORM_L1);
    DEFINE_CONST_ENUM(NORM_L2);
    DEFINE_CONST_ENUM(NORM_L2SQR);
    DEFINE_CONST_ENUM(NORM_HAMMING);
    DEFINE_CONST_ENUM(NORM_HAMMING2);
    DEFINE_CONST_ENUM(NORM_TYPE_MASK);
    DEFINE_CONST_ENUM(NORM_RELATIVE);
    DEFINE_CONST_ENUM(NORM_MINMAX);

    // comparison types
    DEFINE_CONST_ENUM(CMP_EQ);
    DEFINE_CONST_ENUM(CMP_GT);
    DEFINE_CONST_ENUM(CMP_GE);
    DEFINE_CONST_ENUM(CMP_LT);
    DEFINE_CONST_ENUM(CMP_LE);
    DEFINE_CONST_ENUM(CMP_NE);

    // generalized matrix multiplication flags
    DEFINE_CONST_ENUM(GEMM_1_T);
    DEFINE_CONST_ENUM(GEMM_2_T);
    DEFINE_CONST_ENUM(GEMM_3_T);

    // border types
    DEFINE_CONST_ENUM(BORDER_CONSTANT);
    DEFINE_CONST_ENUM(BORDER_REPLICATE);
    DEFINE_CONST_ENUM(BORDER_REFLECT);
    DEFINE_CONST_ENUM(BORDER_WRAP);
    DEFINE_CONST_ENUM(BORDER_REFLECT_101);
    DEFINE_CONST_ENUM(BORDER_TRANSPARENT);
    DEFINE_CONST_ENUM(BORDER_ISOLATED);

    // access flags
    DEFINE_CONST_ENUM(ACCESS_READ);
    DEFINE_CONST_ENUM(ACCESS_WRITE);
    DEFINE_CONST_ENUM(ACCESS_RW);
    DEFINE_CONST_ENUM(ACCESS_MASK);
    DEFINE_CONST_ENUM(ACCESS_FAST);
  }
};

#endif // __CORE__CONSTANTS_H__
